name: Preview Deployment

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened, closed]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  REPOSITORY: shiny-repo
  SERVICE_PREFIX: wetland-dashboard
  REGION: us-central1

jobs:
  deploy-preview:
    if: github.event.action != 'closed'
    permissions:
      contents: read
      id-token: write
      pull-requests: write  # Needed to comment on PR

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create PR service name
        id: service-name
        run: |
          # Create a valid Cloud Run service name from PR number
          SERVICE_NAME="${{ env.SERVICE_PREFIX }}-pr-${{ github.event.number }}"
          echo "SERVICE_NAME=${SERVICE_NAME}" >> $GITHUB_OUTPUT
          echo "Service name: ${SERVICE_NAME}"

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'

      - name: Docker Auth
        uses: 'docker/login-action@v3'
        with:
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - name: Build and Push Container
        run: |-
          IMAGE_TAG="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ steps.service-name.outputs.SERVICE_NAME }}:${{ github.sha }}"
          docker build -t "${IMAGE_TAG}" ./
          docker push "${IMAGE_TAG}"

      - name: Deploy Preview to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ steps.service-name.outputs.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ steps.service-name.outputs.SERVICE_NAME }}:${{ github.sha }}
          flags: '--allow-unauthenticated --port=8080 --memory=2Gi --cpu=1 --timeout=3600 --max-instances=3'
          tag: pr-${{ github.event.number }}

      - name: Add preview labels
        run: |
          gcloud run services update ${{ steps.service-name.outputs.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --update-labels=preview=true,pr-number=${{ github.event.number }},branch=${{ github.head_ref }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🔍 Preview Deployment')
            );

            const previewUrl = '${{ steps.deploy.outputs.url }}';
            const commentBody = `## 🔍 Preview Deployment

            Your changes have been deployed to a preview environment!

            **🌐 Preview URL:** ${previewUrl}

            **📊 Service Details:**
            - Service: \`${{ steps.service-name.outputs.SERVICE_NAME }}\`
            - Region: \`${{ env.REGION }}\`
            - Commit: \`${{ github.sha }}\`

            **⚡ Resources:**
            - Memory: 2Gi
            - CPU: 1
            - Max Instances: 3

            _This preview will be automatically deleted when the PR is closed._

            ---
            <sub>🤖 This comment will be updated with each new commit</sub>`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  cleanup-preview:
    if: github.event.action == 'closed'
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    runs-on: ubuntu-latest
    steps:
      - name: Create PR service name
        id: service-name
        run: |
          SERVICE_NAME="${{ env.SERVICE_PREFIX }}-pr-${{ github.event.number }}"
          echo "SERVICE_NAME=${SERVICE_NAME}" >> $GITHUB_OUTPUT

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      - name: Delete Preview Service
        run: |
          if gcloud run services describe ${{ steps.service-name.outputs.SERVICE_NAME }} --region=${{ env.REGION }} --quiet; then
            echo "Deleting preview service: ${{ steps.service-name.outputs.SERVICE_NAME }}"
            gcloud run services delete ${{ steps.service-name.outputs.SERVICE_NAME }} --region=${{ env.REGION }} --quiet
          else
            echo "Preview service not found, nothing to delete"
          fi

      - name: Delete Container Images
        run: |
          # List and delete images for this PR
          if gcloud artifacts docker images list ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ steps.service-name.outputs.SERVICE_NAME }} --quiet --format="value(IMAGE)" 2>/dev/null; then
            echo "Deleting container images for PR ${{ github.event.number }}"
            gcloud artifacts docker images list ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ steps.service-name.outputs.SERVICE_NAME }} --quiet --format="value(IMAGE)" | \
            xargs -r -I {} gcloud artifacts docker images delete {} --quiet
          else
            echo "No container images found to delete"
          fi

      - name: Comment PR cleanup
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## 🧹 Preview Cleanup

              The preview environment has been automatically deleted:
              - ✅ Cloud Run service removed
              - ✅ Container images cleaned up
              - ✅ Resources deallocated

              _Thank you for contributing!_`
            });